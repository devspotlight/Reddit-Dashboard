#!/usr/bin/env bash

# Based on https://github.com/heroku/kafka-demo/blob/master/bin/start

set -eo pipefail

function cleanup {
  rm -f client.crt client.key
  echo ""
  echo "-----> Exiting."
  exit
}
trap cleanup SIGINT SIGTERM

# Set up env vars (dev)
if [ "${NODE_ENV}" = "development" ]; then
  export KAFKA_URL="$(heroku config:get KAFKA_URL)"
  export KAFKA_CLIENT_CERT="$(heroku config:get KAFKA_CLIENT_CERT)"
  export KAFKA_CLIENT_CERT_KEY="$(heroku config:get KAFKA_CLIENT_CERT_KEY)"
  # TODO: use env var from heroku instance?
  # export KAFKA_TOPIC="$(heroku config:get KAFKA_TOPIC -a twitter-ingest)"
  export KAFKA_TOPIC="reddit-comments"
  export KAFKA_PREFIX=$(heroku config:get KAFKA_PREFIX)
fi

if [[ -z "${KAFKA_CLIENT_CERT}" ]]; then
  echo "KAFKA_CLIENT_CERT is not set. Aborting"
  exit 1
fi

if [[ -z "${KAFKA_CLIENT_CERT_KEY}" ]]; then
  echo "KAFKA_CLIENT_CERT_KEY is not set. Aborting"
  exit 1
fi

if [[ -z "${KAFKA_URL}" ]]; then
  echo "KAFKA_URL is not set. Aborting"
  exit 1
fi

# Setup cert and cert key
rm -f client.crt client.key
echo -n "$KAFKA_CLIENT_CERT" > client.crt
echo -n "$KAFKA_CLIENT_CERT_KEY" > client.key

# Build dist files (prod)
if [ "${NODE_ENV}" = "production" ]; then
  echo "Building client-side dist."
  npm run build
fi

# Start it up
if [ "${NODE_ENV}" = "development" ]; then
  echo "Running nodemon --ignore src/ $NODE_DEBUG_OPTION app.js"
  nodemon --ignore src/ $NODE_DEBUG_OPTION app.js
else
  echo "Starting server-side app"
  node app.js
fi
